#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass scrreprt
\begin_preamble
\usepackage{graphics}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language german-ch
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
SBB Fahrplan als Web Service
\end_layout

\begin_layout Author
Florian Amstutz <
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

florian@amstutz.nu
\end_layout

\end_inset

>
\end_layout

\begin_layout Publishers
Zürcher Hochschule für Angewandte Wissenschaften, Seminar Webprojekte mit
 ASP.NET
\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Chapter
Einleitung
\end_layout

\begin_layout Standard
Das Seminar Webprojekte mit ASP.NET wird im Rahmen des Wahlpflichtmoduls
 Programmierung mit dem .NET Framework besucht und hat die selbstständige
 Formulierung und Lösung eines Projekts mit ASP.NET zum Ziel hat.
\end_layout

\begin_layout Section
Auftrag
\end_layout

\begin_layout Standard
Im Rahmen des Seminar soll selbstständig ein Projekt zu einem ausgewählten
 Thema erarbeitet werden.
 Diese Seminararbeit hatte ursprünglich zum Ziel den SBB Fahrplan mittels
 des Open Data Protocols
\begin_inset CommandInset nomenclature
LatexCommand nomenclature
symbol "Open Data Protocol"
description "a"

\end_inset

 zur Verfügung zu stellen.
 Auf Grund der limitierenden SBB.ch Fahrplan-Webseite wurde die Aufgabenstellung
 so abgeändert, das anstelle eines OData Services ein Web Service zur Verfügung
 gestellt wird.
\end_layout

\begin_layout Standard
Das Seminarresultat besteht aus einer Fahrplanwebseite analog SBB.ch, welche
 als Modul in Orchard Project implementiert ist sowie einem Web Service,
 über welchen Fahrplaninformationen angefragt werden können.
 Die Fahrplanwebseite benutzt diesen Web Service um die gewünschten Fahrplaninfo
rmationen anzuzeigen.
 Der Web Service selbst greift auf SBB.ch um die Fahrplaninformationen weiterzuge
ben.
\end_layout

\begin_layout Chapter
Hauptteil
\end_layout

\begin_layout Standard
Diese Kapitel beschreibt die Umsetzung der Seminararbeit nach dem Wasserfallmode
ll.
 Nach 
\begin_inset CommandInset citation
LatexCommand cite
key "Kuhrmann2012"

\end_inset

 ist das Wasserfallmodell insbesondere für einfache Projekte mit klar definierte
n Anforderungen einsetzbar.
 Da der Umfang dieser Seminararbeit überschaubar ist und der bearbeitende
 Student der einzige Stakeholder ist hat sich das Wasserfallmodell als ideales
 Vorgehensmodell für die Bearbeitung von Seminararbeiten herausgestellt.
 Die einzelnen Unterkapitel des Hauptteils folgen dem Modell (siehe auch
 
\begin_inset CommandInset citation
LatexCommand cite
key "Hung2007"

\end_inset

).
\end_layout

\begin_layout Section
Anforderungen
\begin_inset CommandInset label
LatexCommand label
name "sec:Anforderungen"

\end_inset


\end_layout

\begin_layout Standard
Der erste Schritt des Wasserfallmodells besteht darin die Anforderungen
 an das zu entwickelnde System festzuhalten.
 Aus Gründen der Einfachheit wurde dabei ein einziger Use-Case identifiziert,
 der im Rahmen dieser Arbeit implementiert werden wird (siehe Kapitel 
\begin_inset CommandInset ref
LatexCommand vref
reference "sub:Use-Case-Spezifikation"

\end_inset

).
 
\end_layout

\begin_layout Standard
Um überhaupt erst Use-Cases spezifizieren zu können, beschreibt das erste
 Unterkapitel den Systemkontext des geplanten Systems OpenTimeTable.
\end_layout

\begin_layout Subsection
Systemkontext
\end_layout

\begin_layout Standard
Der Systemkontext beschreibt die Sollperspektive, wie sich das System in
 die Realität integrieren wird.
 Hierdurch wird der Realitätsausschnitt identifiziert, der das System und
 damit potenziell auch dessen Anforderungen beeinflusst.
 Um die Anforderungen an das geplante System korrekt und vollständig spezifizier
en zu können, ist es notwendig, die Beziehung zwischen den einzelnen materiellen
 und immateriellen Aspekten im Systemkontext und dem geplanten System exakt
 zu definieren.
 Der für die Anforderungen des Systems relevante Ausschnitt der Realität
 wird als Systemkontext bezeichnet (nach 
\begin_inset CommandInset citation
LatexCommand cite
key "Pohl2011"

\end_inset

).
\end_layout

\begin_layout Standard
Der Ursprung der Anforderungen des Systems liegt im Systemkontext des geplanten
 Systems.
 Aus diesem Grund wird der Systemkontext vor Erhebung und Dokumentierung
 der Anforderungen festgelegt.
 Der Systemkontext des Systems OpenTimeTable ist in Abbildung 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Systemkontext"

\end_inset

 als Modell dargestellt.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Systemkontext.png
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Systemkontext
\begin_inset CommandInset label
LatexCommand label
name "fig:Systemkontext"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Use-Case-Spezifikation
\begin_inset CommandInset label
LatexCommand label
name "sub:Use-Case-Spezifikation"

\end_inset


\end_layout

\begin_layout Standard
Nach 
\begin_inset CommandInset citation
LatexCommand cite
key "Pohl2011"

\end_inset

 zeigen Use-Case-Diagamme die aus einer externen Nutzungssicht wesentlichen
 Funktionalitäten des betrachteten Systems sowie spezifische Beziehungen
 der einzelnen Funktionalitäten untereinander beziehungsweise zu Aspekten
 in der Umgebung des Systems.
 Abgesehen vom Namen des Use-Cases und dessen Beziehungen dokumentieren
 Use-Case-Diagramme keinerlei weitere Informationen über die einzelnen Use-Cases
, wie z.B.
 die Systematik der Interaktion eines Use-Case mit Akteuren in der Umgebung.
 Diese Informationen werden unter Verwendung einer geeigneten Schablone
 zusätzlich zum Use-Case-Diagramm textuell als Use-Case-Spezifikation festgehalt
en.
\end_layout

\begin_layout Standard
Alle funktionalen Anforderungen werden als Use-Cases modelliert und spezifiziert
\begin_inset Foot
status open

\begin_layout Plain Layout
Die verwendete Schablone stammt aus 
\begin_inset CommandInset citation
LatexCommand cite
key "Pohl2011"

\end_inset

 und dient zur zweckmässigen Strukturierung von Typen von Informationen,
 die einen Use-Case betreffen.
 Die vorgeschlagenen Abschnitte der Schablone Autor, Quelle, Verantwortlicher
 und Qualität werden ausgelassen, da sie im Rahmen dieses Projekts keinen
 zusätzlichen Nutzen bringen.
\end_layout

\end_inset

.
\end_layout

\begin_layout Subsubsection
Fahrplan abfragen
\begin_inset CommandInset label
LatexCommand label
name "sub:Fahrplan-abfragen"

\end_inset


\end_layout

\begin_layout Standard
Der Benutzer möchte den Fahrplan zwischen Ausgangs- und Zielpunkt zu einem
 bestimmten Zeitpunkt abfragen.
 Das System erstellt aus den eingegebenen Daten und den Fahrplaninformationen
 einen personalisierten und individuellen Fahrplan und zeigt diesen dem
 Benutzer an.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename FahrplanAbfragen.png
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Use-Case Fahrplan abfragen
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float table
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="14" columns="2">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="10cm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Abschnitt
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Inhalt
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Bezeichner
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
UC1
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Name
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Fahrplan abfragen
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Priorität
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Wichtigkeit für Systemerfolg: hoch
\begin_inset Newline newline
\end_inset

Technologisches Risiko: hoch
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Kritikalität
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Hoch
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Beschreibung
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Der Benutzer fragt den Fahrplan ab.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Auslösendes Ereignis
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Der Benutzer möchte Informationen zum Fahrplan haben.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Akteure
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Benutzer
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Vorbedingung
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Keine
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Nachbedingung
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Der Benutzer kann eine erneute Fahrplanabfrage starten.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Ergebnis
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Der Fahrplan wird den Eingaben des Benutzers entsprechend dargestellt.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Hauptszenario
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
 Der Benutzer gibt den Ausgangspunkt an.
\end_layout

\begin_layout Plain Layout
2.
 Der Benutzer gibt das Ziel an.
\end_layout

\begin_layout Plain Layout
3.
 Der Benutzer gibt die gewünschte Abfahrtszeit ein.
\end_layout

\begin_layout Plain Layout
4.
 Das System erstellt die Fahrplaninformationen basierend auf den Eingaben
 des Benutzers und unter Einbezug des SBB Fahrplans.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Alternativszenarien
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1a.
 Der Ausgangspunkt ist unbekannt.
\end_layout

\begin_layout Plain Layout
1a1.
 Dem Benutzer wird eine Auswahlliste von passenden Ausgangspunkten angezeigt.
 Er wird aufgefordert einen der Ausgangspunkte auszuwählen oder erneut einen
 Ausgangspunkt einzugeben.
\end_layout

\begin_layout Plain Layout
2a.
 Das Ziel ist unbekannt.
\end_layout

\begin_layout Plain Layout
2a1.
 Dem Benutzer wird eine Auswahlliste von passenden Zielen angezeigt.
 Er wird aufgefordert eines der Ziele auszuwählen oder erneut ein Ziel einzugebe
n.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Ausnahmeszenarien
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Auslösendes Ereignis: Der Benutzer kann keine Verbindung zum System herstellen.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Use-Case-Spezifikation Fahrplan abfragen
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Konzept und Architektur
\end_layout

\begin_layout Standard
Die Konzeptphase
\begin_inset Foot
status open

\begin_layout Plain Layout
auch Designphase genannt
\end_layout

\end_inset

 des Wasserfallmodells behandelt die Entwicklung eines vollständigen und
 umfassenden Lösungskonzepts auf Basis der dokumentierten Anforderungen.
 Zuerst wird das System aus der Bausteinperspektive betrachtet, es wird
 von der Komponentenebene bis zur Klassenebene das System modelliert und
 die Systemarchitektur festgelegt.
 Als weitere Sicht wird die Laufzeitsicht und die Verteilungssicht des Systems
 beleuchtet und spezifziert.
\end_layout

\begin_layout Subsection
Bausteinsicht
\end_layout

\begin_layout Standard
Nach 
\begin_inset CommandInset citation
LatexCommand cite
key "Starke2011"

\end_inset

 und 
\begin_inset CommandInset citation
LatexCommand cite
key "Hruschka2013"

\end_inset

 lassen sich unter dem Begriff 
\begin_inset Quotes eld
\end_inset

Bausteine
\begin_inset Quotes erd
\end_inset

 sämtliche Software- oder Implementierungskomponenten zusammenfassen, die
 letztendlich Abstraktionen von Quellcode darstellen.
 Dazu gehören Klassen, Prozeduren, Programme, Pakete, Komponenten (nach
 der UML-Definition) oder Subsysteme.
\end_layout

\begin_layout Standard
Die Bausteinsicht bildet die Aufgaben des System auf Software-Bausteinen
 oder -Komponenten ab.
 Diese Sicht macht Struktur und Zusammenhänge zwischen den Bausteinen der
 Architektur explizit.
 Bausteinsichten zeigen die statischen Aspekte des Systemes und entsprechen
 in dieser Hinsicht den konventionellen Implementierungsmodellen.
\end_layout

\begin_layout Subsubsection
Komponentendiagramm
\end_layout

\begin_layout Standard
Das Komponentendigramm in Abbildung 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Komponentendiagramm"

\end_inset

 stellt das System OpenTimeTable aus der Vogelperspektive dar und ist die
 höchstabstrahierte Ansicht der Bausteinsicht, die in diesem Projekt verfügbar
 ist.
 
\end_layout

\begin_layout Standard
Die Fahrplan-Webseite SBB.ch stellt einen XML Fahrplan zur Verfügung welcher
 von der Serverapplikation genutzt wird um Fahrplandaten aufzubereiten und
 danach der Clientapplikation weiterzugeben.
\end_layout

\begin_layout Standard
Der OpenTimeTable.Service bezeichnet die Serverapplikation des Systems und
 implementiert die beiden Schnittstellen
\begin_inset Foot
status open

\begin_layout Plain Layout
im Zusammenhang mit WCF auch Service Contracts genannt
\end_layout

\end_inset

 IConnectionService und ILocationService (siehe Kapitel 
\begin_inset CommandInset ref
LatexCommand vref
reference "sub:Service-Contracts"

\end_inset

).
 Er stellt die Schnittstellen als Webservices der Clientapplikation zur
 Verfügung.
 
\end_layout

\begin_layout Standard
Die Clientapplikationen OpenTimeTable.Client, die als Modul innerhalb von
 Orchard realisiert wird, greift auf die Serverapplikation über die beiden
 Schnittstellen zu und stellt die zurückgegeben Daten dem Benutzer dar.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ComponentModel.png
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Komponentendiagramm
\begin_inset CommandInset label
LatexCommand label
name "fig:Komponentendiagramm"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Domänenmodell
\begin_inset CommandInset label
LatexCommand label
name "sub:Domänenmodell"

\end_inset


\end_layout

\begin_layout Standard
Das Domänenmodell (siehe Abbildung 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Klassendiagramm-Domänenmodell"

\end_inset

) umfasst nur die Klassen der Objekte, die über die Serviceschnittstelle
 von der Client- an die Serverapplikation beziehungsweise umgekehrt übertragen
 werden.
 
\end_layout

\begin_layout Standard
OpenTimeTable verwendet ein vergleichsweise simples und selbsterklärendes
 Domänenmodell, das für jeden Benutzer eines Fahrplaninformationssystems
 wie SBB.ch ohne weitere Erklärung verständlich sein sollte.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Contracts.png
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Klassendiagramm Domänenmodell
\begin_inset CommandInset label
LatexCommand label
name "fig:Klassendiagramm-Domänenmodell"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Service Contracts
\begin_inset CommandInset label
LatexCommand label
name "sub:Service-Contracts"

\end_inset


\end_layout

\begin_layout Standard
Ein Service Contract spezifiziert eine Schnittstelle zur Kommunikation verschied
ener Applikationen innerhalb eines verteilten Systems.
 Häufig werden diese Service Contracts als Webservices angeboten, da sie
 dadurch plattform- und frameworkunabhängig genutzt werden können.
 
\end_layout

\begin_layout Standard
Typischerweise umfasst ein Service Contract mehrere Operationen, deren Rückgabew
erte als XML-Fragmente an die konsumierende Applikation zurückgegeben werden.
 Ausserdem ist ein Service Contract per Definition grundsätzlich zustandslos,
 er behandelt mehrere Anfragen (auch desselben Auftraggebers) immer als
 unabhängige Transaktionen.
 Anfragen werden ohne Bezug zu früheren, vorhergegeganen Anfragen behandelt
 und es werden auch keine Sitzungsinformationen ausgetauscht.
\end_layout

\begin_layout Paragraph
ILocationService
\end_layout

\begin_layout Standard
Die in Abbildung 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Klassendiagramm-ILocationService"

\end_inset

 gezeigte Schnittstelle ILocationService stellt Funktionalitäten zur Verfügung
 über welche Haltestellen und Bahnhöfe abgefragt werden können.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename LocationService.png
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Klassendiagramm ILocationService
\begin_inset CommandInset label
LatexCommand label
name "fig:Klassendiagramm-ILocationService"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
IConnectionService
\end_layout

\begin_layout Standard
Der IConnectionService in Abbildung 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Klassendiagramm-IConnectionServi"

\end_inset

 gibt Verbindungen zurück, welche über verschiedene Parameter gesucht werden
 können.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ConnectionService.png
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Klassendiagramm IConnectionService
\begin_inset CommandInset label
LatexCommand label
name "fig:Klassendiagramm-IConnectionServi"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Laufzeitsicht
\end_layout

\begin_layout Standard
Die Laufzeitsicht beschreibt, welche Bestandteile des Systems zur Laufzeit
 existieren und wie diese zusammenwirken (nach 
\begin_inset CommandInset citation
LatexCommand cite
key "Starke2011"

\end_inset

).
 Dabei kommen wichtige Aspekte des Systembetriebs ins Spiel, die beispielsweise
 den Systemstart, die Laufzeitkonfiguration oder die Administration des
 Systems betreffen.
\end_layout

\begin_layout Standard
Darüber hinaus dokumentiert die Laufzeitsicht, wie Laufzeitkomponenten sich
 aus Instanzen von Implementierungsbausteinen zusammensetzen.
 
\end_layout

\begin_layout Subsubsection
Fahrplan abfragen
\end_layout

\begin_layout Standard
Das Sequenzdiagramm in Abbildung 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Sequenzdiagramm-Fahrplan-abfrage"

\end_inset

 entspricht dem Use-Case Fahrplan abfragen (siehe Kapitel 
\begin_inset CommandInset ref
LatexCommand vref
reference "sub:Fahrplan-abfragen"

\end_inset

).
 
\end_layout

\begin_layout Standard
Der Benutzer greift auf die Connection Request View über das MVC-Pattern
 von Orchard zu und gibt die gewünschten Verbindungsdaten für den Fahrplan
 ein.
 Danach greift der TimeTableController des Clients auf den Server zu und
 generiert anhand der vom Benutzer übermittelten Daten einen SOAP-Request.
 Der SOAP-Request wird an den Web Server von SBB.ch gesendet, die Response
 wird vom Server umformatiert und dem Client zurückgegeben, welcher diese
 in der Time Table Result View dem Benutzer präsentiert.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename GetConnectionsSequenceDiagram.png
	scale 50
	rotateAngle 90

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Sequenzdiagramm Fahrplan abfragen
\begin_inset CommandInset label
LatexCommand label
name "fig:Sequenzdiagramm-Fahrplan-abfrage"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Verteilungssicht
\end_layout

\begin_layout Standard
Nach 
\begin_inset CommandInset citation
LatexCommand cite
key "Starke2011"

\end_inset

 beschreibt die Verteilungssicht die Ablaufumgebung des Systems in Form
 von Hardwarekomponenten (wie Prozessoren, Speicher, Netzwerk, Router und
 Firewalls) sowie den beteiligten Protokollen.
 In der Infrastruktursicht können die Leistungsdaten und Parameter der beteiligt
en Elemente dargestellt werden.
 Ausserdem werden zusätzlich Betriebssysteme oder externe Systeme aufgenommen.
\end_layout

\begin_layout Standard
Die Verteilungssicht ist von grosser Beduetung für die Betreiber des Systems,
 die Hardwarearchitekten, das Entwicklungsteam sowie Management und Projektleitu
ng (gemäss 
\begin_inset CommandInset citation
LatexCommand cite
key "Hruschka2013"

\end_inset

).
\end_layout

\begin_layout Subsubsection
Verteilungsdiagramm
\end_layout

\begin_layout Standard
Die Verteilungssicht dieser Projektdokumentation enthält nur ein sehr rudimentär
 ausgearbeitetes Verteilungsdiagramm (siehe Abbildung 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Verteilungsdiagramm"

\end_inset

).
 Dies, da kein konkretes Verteilungsszenario der Applikation innerhalb des
 Projekts geplant wurde.
 Das Projekt beeinhaltet die Erarbeitung des Konzepts sowie die konkrete
 Implementierung der Applikation ohne jedoch auf die Verteilung des Systems
 einzugehen.
 
\end_layout

\begin_layout Standard
Zu beachten ist, dass der OpenTimeTable.Service und der OpenTimeTable.Client
 beide im selben IIS und damit auf dem selben Server laufen könnten, dies
 jedoch auch unterschiedliche Rechner sein könnten.
 Der OpenTimeTable.Client wird als Modul von Orchard implementiert und wird
 deswegen immer innerhalb einer Orchard-Instanz angeboten.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename DeploymentModel.png
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Caption

\begin_layout Plain Layout
Verteilungsdiagramm
\begin_inset CommandInset label
LatexCommand label
name "fig:Verteilungsdiagramm"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Implementierung
\end_layout

\begin_layout Standard
Dieses Kapitel enthält Informationen zur Implementierung der beiden Teile,
 der Server- und der Clientapplikation.
 Dabei wird auf einzelne Besonderheiten in der Implementierung hingewiesen
 sowie die Struktur der Projekte erklärt.
\end_layout

\begin_layout Standard
Da sämtlicher Quellcode und die Dokumentation auf GitHub verfügbar
\begin_inset Foot
status open

\begin_layout Plain Layout
Siehe 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

https://github.com/famstutz/OpenTimeTable
\end_layout

\end_inset


\end_layout

\end_inset

 ist wird in diesem Kapitel nur rudimentär auf die eigentliche Implementierung
 der beiden Applikationen eingegangen.
\end_layout

\begin_layout Subsection
OpenTimeTable.Service
\end_layout

\begin_layout Standard
Die Serverapplikation ist als WCF Web Service implementiert und besteht
 aus zwei Teilen.
 Die Assembly OpenTimeTable.Service.Host enthält die Service Contracts sowie
 deren Implementierung, die Assembly OpenTimeTable.Model.Contracts enthält
 das Domänenmodell (siehe Kapitel 
\begin_inset CommandInset ref
LatexCommand vref
reference "sub:Domänenmodell"

\end_inset

).
\end_layout

\begin_layout Subsection
OpenTimeTable.Client
\end_layout

\begin_layout Standard
Die Clientapplikation ist als Modul für das Content Management System Orchard
 Project
\begin_inset Foot
status open

\begin_layout Plain Layout
Siehe 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.orchardproject.net/
\end_layout

\end_inset


\end_layout

\end_inset

 geschrieben.
 Orchard bietet ein Plugin-System über Microsofts WebMatrix, welches eine
 eigene Visual Studio Solution mit dem erstellen Projekt breitstellt.
 Im Rahmen der Bearbeitung der Seminararbeit wurde jedoch festgestellt,
 dass gewisse Funktionalitäten von Orchard über die WebMatrix nicht verfügbar
 sind und deswegen der gesamte Quellcode von Orchard verwendet werden muss,
 um zum Beispiel Service References der Orchard-Instanz bekannt zu machen.
\end_layout

\begin_layout Standard
Das Modul selber wird mittels ASP.NET MVC implementiert und verwendet die
 Assembly OpenTimeTable.Model.Contracts aus dem vorherigen Kapitel um die
 gesuchten Fahrplaninformationen anzuzeigen.
\end_layout

\begin_layout Section
Verifikation
\end_layout

\begin_layout Standard
Die Verifikation der implementierten Anforderungen (siehe Kapitel 
\begin_inset CommandInset ref
LatexCommand vref
reference "sec:Anforderungen"

\end_inset

) an das System wurde manuell vorgenommen und ist im folgenden Kapitel beschrieb
en.
\end_layout

\begin_layout Subsection
Manuelle Integrationstests
\begin_inset CommandInset label
LatexCommand label
name "sub:Manuelle-Integrationstests"

\end_inset


\end_layout

\begin_layout Standard
Um die Funktionstüchtigkeit des Systems zu überprüfen wurden drei verschiedene
 Fahrplanabfragen sowohl auf SBB.ch wie auch in OpenTimeTable durchgeführt.
 Sind die angezeigten Fahrplandaten identisch, so wird der jeweilge Testfall
 als erfüllt betrachtet.
\end_layout

\begin_layout Subsubsection
Testfall 1 (Genf - Zürich, 5.
 Mai 2013, 08:30)
\end_layout

\begin_layout Standard
Bei einer Fahrplanabfrage von Genf nach Zürich am 5.
 Mai 2013 mit Abfahrtszeit 08:30 stellt SBB.ch und OpenTimeTable exakt dasselbe
 Resultat dar.
\end_layout

\begin_layout Standard
Der Testfall 1 ist somit als erfolgreich zu betrachten.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename TC1_SBB.PNG
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Resultat Testfall 1 SBB.ch
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename TC1_OpenTimeTable.PNG
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Resultat Testfall 1 OpenTimeTable
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Testfall 2 (Ziegelbrücke - Bellinzona, 12.
 April 2013, 19:15)
\end_layout

\begin_layout Standard
Auch bei der Fahrplanabfrage von Ziegelbrücke nach Bellinzona am 12.
 April 2013 mit Abfahrtszeit 19:15 stellen sowohl SBB.ch als auch OpenTimeTable
 dieselben Fahrplaninformationen dar.
\end_layout

\begin_layout Standard
Der Testfall 2 ist somit als erfolgreich zu betrachten.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename TC2_SBB.PNG
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Resultat Testfall 2 SBB.ch
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename TC2_OpenTimeTable.PNG
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Resultat Testfall 2 OpenTimeTable
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Testfall 3 (Zürich, Central - Zürich, Sihlpost, 26.
 Mai 2013, 12:00)
\end_layout

\begin_layout Standard
Bei einer innerstädtischen Fahrplanabfrage von Zürich, Central nach Zürich,
 Sihlpost am 26.
 Mai 2013 mit Abfahrtszeit 12:00 zeigten sich Unterschiede zwischen der
 Anzeige von SBB.ch und derjenigen von OpenTimeTable.
 Im Gegensatz zu den Langstreckenverbindungen scheint SBB.ch bei innerstädtischen
 Verbindungen die angegegebene Ankunftszeit als spätmöglichste Ankunftszeit
 zu betrachten.
 Dies ist jedoch nur auf der Webseite der Fall, verwendet man die iOS-App
 der SBB so werden dieselben Fahrplaninformationen wie auf OpenTimeTable
 dargestellt.
 
\end_layout

\begin_layout Standard
Der Testfall 3 ist auf Grund der Definition in Kapitel 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Manuelle-Integrationstests"

\end_inset

 somit als fehlgeschlagen zu betrachten.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename TC3_SBB.PNG
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Resultat Testfall 3 SBB.ch
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename TC3_OpenTimeTable.PNG
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Resultat Testfall 3 OpenTimeTable
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Testresultate
\end_layout

\begin_layout Standard
Auch wenn der Testfall 3 (siehe Tabelle 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Testresultate"

\end_inset

) als fehlgeschlagen betrachtet werden muss, lässt sich trotzdem sagen,
 dass die Verifikation des Systems OpenTimeTable als erfolgreich abgeschlossen
 wurde.
 Der Benutzer erhält auch in Testfall 3 die gewünschten Fahrplaninformationen,
 es ist dabei auf die Inkonsistenz von SBB.ch in der Anzeige von Verbindungen
 hinzuweisen.
\end_layout

\begin_layout Standard
\begin_inset Float table
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Testfall
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Fahrplaninformationen
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Resultat
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Testfall 1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Genf - Zürich, 5.
 Mai 2013, 08:30
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Bestanden
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Testfall 2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Ziegelbrücke - Bellinzona, 12.
 April 2013, 19:15
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Bestanden
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Testfall 3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Zürich, Central - Zürich, Sihlpost, 26.
 Mai 2013, 12:00
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Fehlgeschlagen
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Testresultate
\begin_inset CommandInset label
LatexCommand label
name "tab:Testresultate"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Chapter
Schlussteil
\end_layout

\begin_layout Standard
Dieses Kapitel enthält abschliessende Betrachtungen im Rückblick auf die
 Seminararbeit sowie die Abweichungen von der ursprünglich eingereichten
 Aufgabenstellung.
\end_layout

\begin_layout Section
Fazit
\end_layout

\begin_layout Standard
Abschliessend lässt sich sagen, dass die Bearbeitung dieser Seminararbeit
 aufwändiger war, als zuerst angenommen.
 Die Verwendung von Orchard als CMS-Container hat teilweise einige Steine
 in den Weg gelegt, die nicht aufgetreten wären, wenn eine eigene Webapplikation
 auf Basis von ASP.NET MVC erstellt worden wäre.
 Auch der ursprüngliche Plan, die Fahrplandaten als Open Data Service Protocol
 Service zurückzugeben, der sich dann als unmöglich herausgestellt hat (siehe
 nächstes Kapitel), hat viel Zeit gekostet.
\end_layout

\begin_layout Standard
Nichts desto trotz hat mir diese Seminarbeit gut gefallen, habe ich doch
 einige Zeit mit dem OData Protokoll und dem Orchard Project verbracht,
 was ich sicher auch in Zukunft wieder einsetzen kann.
\end_layout

\begin_layout Section
Abweichungen von der Aufgabenstellung
\end_layout

\begin_layout Standard
Da der SBB.ch XML-Fahrplan nach einer Anzahl von zurückgegebenen Resultaten
 alle weiteren Anfragen blockiert, war es nicht möglich Open Data Protocol
 Services für die Fahrplandaten zu schreiben, da ein OData-Service jeweils
 die gesamte Menge aller Objekte zurückgibt und der Konsument des Services
 danach eine Einschränkung trifft, welches Untermenge der gesamten Objekten
 ihn interessieren.
 Aus diesem Grund wurde anstelle eines OData-Services ein Web Service erstellt.
\end_layout

\begin_layout Standard
Die Aufgabenstellung sah auch vor, dass das System mittels TDD erstellt
 wird sowie automatisierte Integrationstests umgesetzt werden.
 In Anbetracht des Kapitels 2 des Reglements Seminararbeit (siehe 
\begin_inset CommandInset citation
LatexCommand cite
key "Stern2012"

\end_inset

), welches einen Aufwand für die Seminararbeit von 50 Stunden pro Studenten
 vorsieht, wurde auf diese Punkte verzichtet, da bereits ohne automatisierte
 Testsuite über 50 Stunden für die Bearbeitung dieser Seminararbeit aufgewendet
 wurden.
\end_layout

\begin_layout Chapter*
\start_of_appendix
Glossar
\end_layout

\begin_layout Description
ASP.NET ASP.NET ist ein Applikationsframework für Webapplikation und das Erzeugen
 von dynamischen Websites.
\end_layout

\begin_layout Description
CMS Ein Content Management System (kurz CMS) ist eine Applikation die das
 Erstellen, Bearbeiten, Organisieren und Publizeren von Inhalten über eine
 zentrale Schnittstelle.
\end_layout

\begin_layout Description
GitHub GitHub ist ein webbasierter Service für Softwareentwicklungsprojekte,
 welches das Git Versionsverwaltungssystem nutzen.
\end_layout

\begin_layout Description
IIS Die Internet Information Services (kurz IIS) ist ein Webserver, welcher
 mit Microsoft Windows mitgeliefert wird und die Standardlösung für das
 Bereitstellen von ASP.NET-basierten Webseiten im Internet darstellt.
\end_layout

\begin_layout Description
iOS iOS ist ein mobiles Betriebssystem das von Apple für das iPhone und
 das iPad entwickelt wurde.
\end_layout

\begin_layout Description
OData Das Open Data Protocol (kurz OData) ist ein Datenzugriffsprotokoll,
 um Daten abzufragen und zu aktualisieren.
\end_layout

\begin_layout Description
\begin_inset ERT
status open

\begin_layout Plain Layout

Orchard Project
\end_layout

\end_inset

 Das Orchard Project ist ein frei verfügbares und Open-Source CMS das in
 ASP.NET unter Verwendung des ASP.NET MVC Frameworks geschrieben wurde.
\end_layout

\begin_layout Description
MVC Model-View-Controller (kurz MVC) ist ein Softwarearchitekturpattern
 welches die Informationsrepräsentation von der dem Benutzer möglichen Interakti
on entkoppelt.
\end_layout

\begin_layout Description
SOAP Das Simple Object Access Protocol (kurz SOAP) ist eine Protokollspezifikati
on für das austuaschen von strukturierten Informationen über Web Services.
\end_layout

\begin_layout Description
TDD Testgetriebene Entwicklung (englisch kurz TDD) ist ein Softwareentwicklungsp
rozess das auf der Wiederholung eines sehr kurzen Entwicklungszyklus beruht:
 Schreiben eines Testcases, minimalen Code um das Testcase zu befriedigen,
 Refactoring.
\end_layout

\begin_layout Description
WCF Die Windows Communication Foundation (kurz WCF) ist eine Laufzeitumgebung
 und APIs im .NET Framework für das Entwickeln von verbundenen, serviceorientiert
en Applikationen.
\end_layout

\begin_layout Description
WebMatrix Die Microsoft WebMatrix ist ein Tool um Webseiten über die Cloud
 zu Erstellen, Verteilen und Unterhalten.
\end_layout

\begin_layout Standard
\begin_inset CommandInset bibtex
LatexCommand bibtex
bibfiles "Seminarbericht"
options "plainnat"

\end_inset


\end_layout

\end_body
\end_document
